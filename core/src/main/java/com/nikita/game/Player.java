package com.nikita.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.Box2D;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;

public class Player {
    public Body body;
    private Texture walkTexture, attackTexture;
    private TextureRegion currentFrame;
    private Animation<TextureRegion> walkAnimation, attackAnimation;
    private Animation<TextureRegion> currentAnimation;
    private float stateTime = 0f;
    private Direction currentDirection = Direction.DOWN;
    private boolean isMoving = false;
    public boolean isAttacking = false; // –î–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ GameScreen
    private float attackTime = 0f;
    private final float ATTACK_DURATION = 0.6f; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ (6 –∫–∞–¥—Ä–æ–≤ * 0.1—Å)
    private boolean attackHit = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –∞—Ç–∞–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

    private boolean canJump = false;
    private int health = 4;
    private int maxHealth = 4;
    private int keys = 0;
    private int seals = 0; // –ü–µ—á–∞—Ç–∏/–∫—Ä–∏—Å—Ç–∞–ª–ª—ã
    private boolean isDead = false;
    private float invulnerabilityTime = 0f; // –í—Ä–µ–º—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
    private final float INVULNERABILITY_DURATION = 1.5f; // 1.5 —Å–µ–∫—É–Ω–¥—ã –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏

    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    public enum Direction {
        UP, DOWN, LEFT, RIGHT
    }

    public Player(World world, float x, float y) {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞
        BodyDef bodyDef = new BodyDef();
        bodyDef.type = BodyDef.BodyType.DynamicBody;
        bodyDef.position.set(x, y);
        body = world.createBody(bodyDef);

        PolygonShape shape = new PolygonShape();
        shape.setAsBox(0.4f, 0.9f);
        FixtureDef fixtureDef = new FixtureDef();
        fixtureDef.shape = shape;
        fixtureDef.density = 1f;
        fixtureDef.friction = 0.2f;
        body.createFixture(fixtureDef);
        shape.dispose();

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        walkTexture = new Texture("walk_cycle.png");     // –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã
        attackTexture = new Texture("attack_cycle.png"); // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏

        // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∫–∞–¥—Ä, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–ø—Ä–∞–π—Ç-–ª–∏—Å—Ç–æ–≤)
        createAnimations();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä
        currentFrame = walkAnimation.getKeyFrame(0);
    }

    private void createAnimations() {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã - 6 –∫–∞–¥—Ä–æ–≤ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä—è–¥—É
        int walkFrameWidth = walkTexture.getWidth() / 6;  // 6 –∫–∞–¥—Ä–æ–≤ —Ö–æ–¥—å–±—ã (256px –∫–∞–∂–¥—ã–π)
        int walkFrameHeight = walkTexture.getHeight();

        // –û–±—Ä–µ–∑–∞–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        int cropLeft = walkFrameWidth / 2;  // –û–±—Ä–µ–∑–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —à–∏—Ä–∏–Ω—ã —Å–ª–µ–≤–∞
        int extraRight = walkFrameWidth / 3;  // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å —à–∏—Ä–∏–Ω—ã —Å–ø—Ä–∞–≤–∞ (—É–º–µ–Ω—å—à–µ–Ω–æ —Å –ø–æ–ª–æ–≤–∏–Ω—ã)

        TextureRegion[] walkFrames = new TextureRegion[6];
        for (int i = 0; i < 6; i++) {
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω —Å –æ–±—Ä–µ–∑–∫–æ–π —Å–ª–µ–≤–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Å–ø—Ä–∞–≤–∞
            walkFrames[i] = new TextureRegion(walkTexture,
                i * walkFrameWidth + cropLeft, 0,  // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ—Ä–µ–¥–∏–Ω—ã –∫–∞–¥—Ä–∞ (–æ–±—Ä–µ–∑–∞–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å)
                walkFrameWidth - cropLeft + extraRight, walkFrameHeight);  // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ - 6 –∫–∞–¥—Ä–æ–≤ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä—è–¥—É
        int attackFrameWidth = attackTexture.getWidth() / 6;  // 6 –∫–∞–¥—Ä–æ–≤ –∞—Ç–∞–∫–∏ (256px –∫–∞–∂–¥—ã–π)
        int attackFrameHeight = attackTexture.getHeight();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –æ–±—Ä–µ–∑–∫–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∞—Ç–∞–∫–∏
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ extraRight (walkFrameWidth/3) –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        TextureRegion[] attackFrames = new TextureRegion[6];
        for (int i = 0; i < 6; i++) {
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω —Å –æ–±—Ä–µ–∑–∫–æ–π —Å–ª–µ–≤–∞ –∏ —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Å–ø—Ä–∞–≤–∞
            attackFrames[i] = new TextureRegion(attackTexture,
                i * attackFrameWidth + cropLeft, 0,  // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ—Ä–µ–¥–∏–Ω—ã –∫–∞–¥—Ä–∞ (–æ–±—Ä–µ–∑–∞–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å)
                attackFrameWidth - cropLeft + (attackFrameWidth / 3), attackFrameHeight);  // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –Ω–∞ —Ç—Ä–µ—Ç—å —à–∏—Ä–∏–Ω—ã
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        float walkFrameDuration = 0.12f;   // –ü–ª–∞–≤–Ω–∞—è —Ö–æ–¥—å–±–∞
        float attackFrameDuration = 0.08f;  // –ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞

        // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
        walkAnimation = new Animation<>(walkFrameDuration, walkFrames);
        walkAnimation.setPlayMode(Animation.PlayMode.LOOP);

        attackAnimation = new Animation<>(attackFrameDuration, attackFrames);
        attackAnimation.setPlayMode(Animation.PlayMode.NORMAL); // –û–¥–∏–Ω —Ä–∞–∑

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        currentAnimation = walkAnimation;

        System.out.println("‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:");
        System.out.println("   –•–æ–¥—å–±–∞: " + walkFrames.length + " –∫–∞–¥—Ä–æ–≤ (" + walkFrameWidth + "x" + walkFrameHeight + ")");
        System.out.println("   –ê—Ç–∞–∫–∞: " + attackFrames.length + " –∫–∞–¥—Ä–æ–≤ (" + attackFrameWidth + "x" + attackFrameHeight + ")");
        System.out.println("   –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä: walk=" + walkTexture.getWidth() + "x" + walkTexture.getHeight() +
                          ", attack=" + attackTexture.getWidth() + "x" + attackTexture.getHeight());
        System.out.println("   –û–±—Ä–µ–∑–∫–∞: —Å–ª–µ–≤–∞=" + cropLeft + "px, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞=" + extraRight +
                          "px (—É–º–µ–Ω—å—à–µ–Ω–æ), –∏—Ç–æ–≥–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞=" + (walkFrameWidth - cropLeft + extraRight) + "px");
    }

    public void update(float delta) {
        stateTime += delta;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if (invulnerabilityTime > 0) {
            invulnerabilityTime -= delta;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞—Ç–∞–∫–∏
        if (isAttacking) {
            attackTime += delta;
            if (attackTime >= ATTACK_DURATION) {
                isAttacking = false;
                attackTime = 0f;
                attackHit = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞—Ç–∞–∫–∏
                stateTime = 0f; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç–∞–∫—É (–ø—Ä–æ–±–µ–ª –∏–ª–∏ Enter)
        if (!isAttacking && (Gdx.input.isKeyJustPressed(Input.Keys.SPACE) || Gdx.input.isKeyJustPressed(Input.Keys.ENTER))) {
            isAttacking = true;
            attackTime = 0f;
            attackHit = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∞—Ç–∞–∫–∏
            stateTime = 0f;
            System.out.println("üó°Ô∏è –ê—Ç–∞–∫–∞!");
        }

        // –ï—Å–ª–∏ –∞—Ç–∞–∫—É–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if (isAttacking) {
            body.setLinearVelocity(0, 0); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∞—Ç–∞–∫–∏
            updateAnimation();
            return;
        }

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö (WASD + —Å—Ç—Ä–µ–ª–∫–∏)
        float moveX = 0;
        float moveY = 0;
        Direction newDirection = currentDirection;
        boolean wasMoving = isMoving;

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (Gdx.input.isKeyPressed(Input.Keys.A) || Gdx.input.isKeyPressed(Input.Keys.LEFT)) {
            moveX = -1;
            newDirection = Direction.LEFT;
        }
        if (Gdx.input.isKeyPressed(Input.Keys.D) || Gdx.input.isKeyPressed(Input.Keys.RIGHT)) {
            moveX = 1;
            newDirection = Direction.RIGHT;
        }

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (Gdx.input.isKeyPressed(Input.Keys.S) || Gdx.input.isKeyPressed(Input.Keys.DOWN)) {
            moveY = -1;
            newDirection = Direction.DOWN;
        }
        if (Gdx.input.isKeyPressed(Input.Keys.W) || Gdx.input.isKeyPressed(Input.Keys.UP)) {
            moveY = 1;
            newDirection = Direction.UP;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
        isMoving = (moveX != 0 || moveY != 0);

        // –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –Ω–∞—á–∞–ª/–ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –¥–≤–∏–∂–µ–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        if (newDirection != currentDirection || isMoving != wasMoving) {
            stateTime = 0f;
            currentDirection = newDirection;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä–∞–Ω–∏—Ü
        float speed = 3f;
        Vector2 currentPos = body.getPosition();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –¥–≤–∏–∂–µ–Ω–∏—è
        float newX = currentPos.x + moveX * speed * delta;
        float newY = currentPos.y + moveY * speed * delta;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∫–∞—Ä—Ç—ã (20x15 —Ç–∞–π–ª–æ–≤)
        if (newX < 0.5f) newX = 0.5f;
        if (newX > 19.5f) newX = 19.5f;
        if (newY < 0.5f) newY = 0.5f;
        if (newY > 14.5f) newY = 14.5f;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        body.setLinearVelocity((newX - currentPos.x) / delta, (newY - currentPos.y) / delta);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
        updateAnimation();

        // –ü—Ä—ã–∂–æ–∫ (–Ω–∞ –∫–ª–∞–≤–∏—à—É J)
        if (Gdx.input.isKeyJustPressed(Input.Keys.J) && canJump) {
            body.applyLinearImpulse(new Vector2(0, 6f), body.getWorldCenter(), true);
            canJump = false;
            System.out.println("ü¶ò –ü—Ä—ã–∂–æ–∫!");
        }
    }

    private void updateAnimation() {
        stateTime += Gdx.graphics.getDeltaTime();

        Animation<TextureRegion> newAnimation;

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –∞—Ç–∞–∫–∏
        if (isAttacking) {
            newAnimation = attackAnimation;
        } else if (isMoving) {
            newAnimation = walkAnimation;
        } else {
            newAnimation = null; // –ù–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫–æ—è
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (currentAnimation != newAnimation) {
            currentAnimation = newAnimation;
            stateTime = 0;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
        if (currentAnimation != null) {
            if (isAttacking) {
                // –î–ª—è –∞—Ç–∞–∫–∏ - –±–µ–∑ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
                currentFrame = currentAnimation.getKeyFrame(stateTime, false);
            } else {
                // –î–ª—è —Ö–æ–¥—å–±—ã - —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º
                currentFrame = currentAnimation.getKeyFrame(stateTime, true);
            }
        } else {
            // –î–ª—è –ø–æ–∫–æ—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä —Ö–æ–¥—å–±—ã
            currentFrame = walkAnimation.getKeyFrame(0, false);
        }
    }

    public void render(SpriteBatch batch) {
        Vector2 position = body.getPosition();
        float width = 1.2f;   // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å–ø—Ä–∞–π—Ç–∞
        float height = 1.6f;  // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å–ø—Ä–∞–π—Ç–∞

        // –í–∫–ª—é—á–∞–µ–º –±–ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        batch.enableBlending();
        batch.setBlendFunction(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA);

        // –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if (isInvulnerable()) {
            // –ú–∏–≥–∞–µ–º –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã
            float blinkTime = invulnerabilityTime % 0.2f;
            if (blinkTime > 0.1f) {
                batch.setColor(1f, 1f, 1f, 0.5f); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            } else {
                batch.setColor(1f, 1f, 1f, 1f); // –û–±—ã—á–Ω—ã–π
            }
        } else {
            batch.setColor(1f, 1f, 1f, 1f); // –û–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç
        }

        // –†–∏—Å—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö TextureRegion
        // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã —É–∂–µ –æ–±—Ä–µ–∑–∞–ª–∏ –ª–µ–≤—É—é —á–∞—Å—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–∏–ª–∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –≤ TextureRegion,
        // –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        float offsetX = 0.5f;  // –ù–µ–±–æ–ª—å—à–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        float widthMultiplier = 1.2f;  // –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        batch.draw(currentFrame,
                   position.x - width/2 - offsetX,    // –°–º–µ—â–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–ª–µ–≤–æ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                   position.y - height/2,   // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ Y
                   width * widthMultiplier, height);  // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç
        batch.setColor(1f, 1f, 1f, 1f);
    }

    public void setCanJump(boolean value) {
        canJump = value;
    }

    public Vector2 getPosition() {
        return body.getPosition();
    }

    public void heal(int amount) {
        health = Math.min(health + amount, maxHealth);
    }

    public void addKey() {
        keys++;
    }

    public void addSeal() {
        seals++;
    }

    public int getHealth() { return health; }

    public int getKeys() { return keys; }

    public int getSeals() { return seals; }

    public boolean hasKey() {
        return keys > 0;
    }

    public void useKey() {
        if (keys > 0) {
            keys--;
        }
    }

    public void setHealth(int value) {
        this.health = Math.max(0, Math.min(value, maxHealth));
    }
    public void setKeys(int value) {
        this.keys = Math.max(0, value);
    }
    public void setSeals(int value) {
        this.seals = Math.max(0, value);
    }

    public void takeDamage(int damage) {
        if (invulnerabilityTime <= 0 && !isDead) {
            health -= damage;
            invulnerabilityTime = INVULNERABILITY_DURATION;
            System.out.println("üíî –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω! –ó–¥–æ—Ä–æ–≤—å–µ: " + health);

            if (health <= 0) {
                isDead = true;
                health = 0;
                System.out.println("üíÄ –ò–≥—Ä–æ–∫ —É–º–µ—Ä!");
            }
        }
    }

    public boolean isDead() {
        return isDead;
    }

    public boolean isInvulnerable() {
        return invulnerabilityTime > 0;
    }

    public boolean canAttackHit() {
        return isAttacking && !attackHit;
    }

    public void setAttackHit() {
        attackHit = true;
    }

    public void dispose() {
        if (walkTexture != null) {
            walkTexture.dispose();
        }
        if (attackTexture != null) {
            attackTexture.dispose();
        }
    }
}
