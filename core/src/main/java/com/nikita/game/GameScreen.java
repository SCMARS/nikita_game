package com.nikita.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.physics.box2d.Box2D;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.Preferences;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.PolygonShape;

public class GameScreen implements Screen {
    private OrthographicCamera camera;
    private SpriteBatch batch;
    private TiledMap map;
    private OrthogonalTiledMapRenderer mapRenderer;
    private World world;
    private Player player;
    private Array<Enemy> enemies;
    private String levelName;
    private com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer;
    private com.badlogic.gdx.graphics.Texture testTexture;

    public GameScreen() {
        this("Level1.tmx"); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –∫–∞—Ä—Ç—É Level1
    }

    public GameScreen(String levelName) {
        this.levelName = levelName;
        Box2D.init();
        camera = new OrthographicCamera();
        camera.setToOrtho(false, 20, 15); // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞—Ä—Ç—ã Level1
        batch = new SpriteBatch();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ShapeRenderer –∏ —Ç–µ—Å—Ç–æ–≤—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
        shapeRenderer = new com.badlogic.gdx.graphics.glutils.ShapeRenderer();

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –±–µ–ª—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        com.badlogic.gdx.graphics.Pixmap pixmap = new com.badlogic.gdx.graphics.Pixmap(100, 100, com.badlogic.gdx.graphics.Pixmap.Format.RGBA8888);
        pixmap.setColor(com.badlogic.gdx.graphics.Color.WHITE);
        pixmap.fill();
        testTexture = new com.badlogic.gdx.graphics.Texture(pixmap);
        pixmap.dispose();
        try {
            System.out.println("=== –û–¢–õ–ê–î–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ö–ê–†–¢–´ ===");
            System.out.println("üçé macOS Debug Info:");
            System.out.println("   OS: " + System.getProperty("os.name"));
            System.out.println("   Java: " + System.getProperty("java.version"));
            System.out.println("   OpenGL Vendor: " + Gdx.gl.glGetString(Gdx.gl.GL_VENDOR));
            System.out.println("   OpenGL Renderer: " + Gdx.gl.glGetString(Gdx.gl.GL_RENDERER));
            System.out.println("   OpenGL Version: " + Gdx.gl.glGetString(Gdx.gl.GL_VERSION));

            System.out.println("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É: " + levelName);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (!Gdx.files.internal(levelName).exists()) {
                System.err.println("–û–®–ò–ë–ö–ê: –§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: " + levelName);
                throw new RuntimeException("–§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: " + levelName);
            }
            System.out.println("‚úì –§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω");

            map = new TmxMapLoader().load(levelName);
            System.out.println("‚úì –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ
            System.out.println("–†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã: " + map.getProperties().get("width") + "x" + map.getProperties().get("height"));
            System.out.println("–†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞: " + map.getProperties().get("tilewidth") + "x" + map.getProperties().get("tileheight"));
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤: " + map.getLayers().getCount());

            for (int i = 0; i < map.getLayers().getCount(); i++) {
                System.out.println("–°–ª–æ–π " + i + ": " + map.getLayers().get(i).getName() + " (—Ç–∏–ø: " + map.getLayers().get(i).getClass().getSimpleName() + ")");
            }

            mapRenderer = new OrthogonalTiledMapRenderer(map, 1f); // –ú–∞—Å—à—Ç–∞–± 1:1 –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            System.out.println("‚úì –†–µ–Ω–¥–µ—Ä–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω");

        } catch (Exception e) {
            System.err.println("–û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
        world = new World(new Vector2(0, -12f), true);
        player = new Player(world, 2, 2);
        enemies = new Array<>();
        enemies.add(new Enemy(world, 8, 2, 7, 12));
        enemies.add(new Enemy(world, 15, 2, 14, 18));
        createCollisionBodiesFromMap();
        loadGame(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        saveGame(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É—Ä–æ–≤–Ω—è
    }

    private void createCollisionBodiesFromMap() {

        int tileWidth = map.getProperties().get("tilewidth", Integer.class);
        int tileHeight = map.getProperties().get("tileheight", Integer.class);
        int width = map.getProperties().get("width", Integer.class);
        int height = map.getProperties().get("height", Integer.class);
        com.badlogic.gdx.maps.tiled.TiledMapTileLayer walls = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get("Walls");
        if (walls == null) {
            // –ï—Å–ª–∏ —Å–ª–æ—è Walls –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–ª–æ–π
            walls = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get(0);
        }
        if (walls == null) return;
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell cell = walls.getCell(x, y);
                if (cell != null && cell.getTile() != null) {
                    BodyDef bodyDef = new BodyDef();
                    bodyDef.type = BodyDef.BodyType.StaticBody;
                    // –¶–µ–Ω—Ç—Ä —Ç–∞–π–ª–∞ (Box2D: 1 —é–Ω–∏—Ç = 1 —Ç–∞–π–ª)
                    bodyDef.position.set(x + 0.5f, y + 0.5f);
                    Body body = world.createBody(bodyDef);
                    PolygonShape shape = new PolygonShape();
                    shape.setAsBox(0.5f, 0.5f); // –ü–æ–ª—Ç–∞–π–ª–∞ –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
                    body.createFixture(shape, 0);
                    shape.dispose();
                }
            }
        }
    }

    private void saveGame() {
        Preferences prefs = Gdx.app.getPreferences("save");
        prefs.putString("level", levelName);
        prefs.putFloat("player_x", player.getPosition().x);
        prefs.putFloat("player_y", player.getPosition().y);
        prefs.putInteger("player_health", player.getHealth());
        prefs.putInteger("player_keys", player.getKeys());
        prefs.putInteger("player_seals", player.getSeals());
        prefs.flush();
    }

    private void loadGame() {
        Preferences prefs = Gdx.app.getPreferences("save");
        if (prefs.contains("level") && prefs.getString("level").equals(levelName)) {
            float x = prefs.getFloat("player_x", 2f);
            float y = prefs.getFloat("player_y", 2f);
            player.body.setTransform(x, y, 0);
            player.setHealth(prefs.getInteger("player_health", 3));
            player.setKeys(prefs.getInteger("player_keys", 0));
            player.setSeals(prefs.getInteger("player_seals", 0));
        }
    }

    // –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —É—Ä–æ–≤–Ω—è
    public void endLevel() {
        saveGame();
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã
    }

    @Override
    public void show() {}

    private boolean debugPrinted = false;

    @Override
    public void render(float delta) {
        world.step(delta, 6, 2);
        player.update(delta);
        for (Enemy e : enemies) e.update(delta, player.getPosition());
        // –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã Level1
        camera.position.set(10, 7.5f, 0); // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã Level1
        camera.update();

        if (!debugPrinted) {
            System.out.println("=== –û–¢–õ–ê–î–ö–ê –†–ï–ù–î–ï–†–ò–ù–ì–ê ===");
            System.out.println("–ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã: " + camera.position);
            System.out.println("–†–∞–∑–º–µ—Ä viewport –∫–∞–º–µ—Ä—ã: " + camera.viewportWidth + "x" + camera.viewportHeight);
            System.out.println("–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: " + player.getPosition());
            System.out.println("–ö–∞—Ä—Ç–∞ –Ω–µ null: " + (map != null));
            System.out.println("–†–µ–Ω–¥–µ—Ä–µ—Ä –Ω–µ null: " + (mapRenderer != null));
            debugPrinted = true;
        }

        Gdx.gl.glClearColor(0.0f, 0.0f, 1.0f, 1); // –°–ò–ù–ò–ô —Ñ–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É
        if (mapRenderer != null && map != null) {
            mapRenderer.setView(camera);
            mapRenderer.render();
        }

        batch.setProjectionMatrix(camera.combined);
        batch.begin();
        // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
        // player.render(batch);
        // for (Enemy e : enemies) e.render(batch);
        batch.end();
    }

    @Override
    public void resize(int width, int height) {
        camera.viewportWidth = 20f;
        camera.viewportHeight = 20f * height / (float)width;
        camera.update();
    }

    @Override
    public void pause() {}
    @Override
    public void resume() {}
    @Override
    public void hide() {}
    @Override
    public void dispose() {
        if (map != null) map.dispose();
        if (mapRenderer != null) mapRenderer.dispose();
        if (batch != null) batch.dispose();
        if (world != null) world.dispose();
        if (shapeRenderer != null) shapeRenderer.dispose();
        if (testTexture != null) testTexture.dispose();
    }
}
