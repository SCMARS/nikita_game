package com.nikita.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.physics.box2d.Box2D;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.Preferences;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.PolygonShape;

public class GameScreen implements Screen {
    private NikitaGame game;
    private OrthographicCamera camera;
    private SpriteBatch batch;
    private TiledMap map;
    private OrthogonalTiledMapRenderer mapRenderer;
    private World world;
    private Player player;
    private Array<Enemy> enemies;
    private String levelName;
    private com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer;
    private com.badlogic.gdx.graphics.Texture testTexture;

    // –ü–æ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
    private boolean showExitConfirm = false;
    private int exitSelected = 0; // 0 - –î–∞, 1 - –ù–µ—Ç
    private BitmapFont exitFont, exitTitleFont;
    private GlyphLayout exitLayout = new GlyphLayout();
    private ShapeRenderer exitShapeRenderer;

    public GameScreen() {
        this(null, "maps/level_0.tmx"); // –†–∞–±–æ—á–∞—è –∫–∞—Ä—Ç–∞ 20x15 —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    }

    public GameScreen(String levelName) {
        this(null, levelName);
    }

    public GameScreen(NikitaGame game, String levelName) {
        this.game = game;
        this.levelName = levelName;
        Box2D.init();
        camera = new OrthographicCamera();
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç—ã 20x15 —Ç–∞–π–ª–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        camera.setToOrtho(false, 22, 17); // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        batch = new SpriteBatch();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ShapeRenderer –∏ —Ç–µ—Å—Ç–æ–≤—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
        shapeRenderer = new com.badlogic.gdx.graphics.glutils.ShapeRenderer();
        exitShapeRenderer = new ShapeRenderer();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
        FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("Roboto-Regular.ttf"));
        FreeTypeFontGenerator.FreeTypeFontParameter parameter = new FreeTypeFontGenerator.FreeTypeFontParameter();
        parameter.size = 32;
        parameter.characters = FreeTypeFontGenerator.DEFAULT_CHARS + "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è";
        exitFont = generator.generateFont(parameter);
        parameter.size = 40;
        parameter.color = Color.WHITE;
        exitTitleFont = generator.generateFont(parameter);
        generator.dispose();

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –±–µ–ª—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        com.badlogic.gdx.graphics.Pixmap pixmap = new com.badlogic.gdx.graphics.Pixmap(100, 100, com.badlogic.gdx.graphics.Pixmap.Format.RGBA8888);
        pixmap.setColor(com.badlogic.gdx.graphics.Color.WHITE);
        pixmap.fill();
        testTexture = new com.badlogic.gdx.graphics.Texture(pixmap);
        pixmap.dispose();
        try {
            System.out.println("=== –û–¢–õ–ê–î–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ö–ê–†–¢–´ ===");
            System.out.println("üçé macOS Debug Info:");
            System.out.println("   OS: " + System.getProperty("os.name"));
            System.out.println("   Java: " + System.getProperty("java.version"));
            System.out.println("   OpenGL Vendor: " + Gdx.gl.glGetString(Gdx.gl.GL_VENDOR));
            System.out.println("   OpenGL Renderer: " + Gdx.gl.glGetString(Gdx.gl.GL_RENDERER));
            System.out.println("   OpenGL Version: " + Gdx.gl.glGetString(Gdx.gl.GL_VERSION));

            System.out.println("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É: " + levelName);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (!Gdx.files.internal(levelName).exists()) {
                System.err.println("–û–®–ò–ë–ö–ê: –§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: " + levelName);
                throw new RuntimeException("–§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: " + levelName);
            }
            System.out.println("‚úì –§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω");

            map = new TmxMapLoader().load(levelName);
            System.out.println("‚úì –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ
            System.out.println("–†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã: " + map.getProperties().get("width") + "x" + map.getProperties().get("height"));
            System.out.println("–†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞: " + map.getProperties().get("tilewidth") + "x" + map.getProperties().get("tileheight"));
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤: " + map.getLayers().getCount());

            for (int i = 0; i < map.getLayers().getCount(); i++) {
                System.out.println("–°–ª–æ–π " + i + ": " + map.getLayers().get(i).getName() + " (—Ç–∏–ø: " + map.getLayers().get(i).getClass().getSimpleName() + ")");
            }

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–ª—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–π–ª–æ–≤)
            com.badlogic.gdx.maps.tiled.TiledMapTileLayer groundLayer = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get(0);
            if (groundLayer != null) {
                System.out.println("üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–π–ª–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã:");
                int count = 0;
                for (int x = 45; x <= 55 && count < 5; x++) {
                    for (int y = 8; y <= 12 && count < 5; y++) {
                        com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell cell = groundLayer.getCell(x, y);
                        if (cell != null && cell.getTile() != null) {
                            System.out.println("   –¢–∞–π–ª (" + x + "," + y + "): ID " + cell.getTile().getId());
                            count++;
                        }
                    }
                }
            }

            mapRenderer = new OrthogonalTiledMapRenderer(map, 1f/32f); // –ú–∞—Å—à—Ç–∞–± –¥–ª—è —Ç–∞–π–ª–æ–≤ 32x32
            System.out.println("‚úì –†–µ–Ω–¥–µ—Ä–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω");

        } catch (Exception e) {
            System.err.println("–û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
        world = new World(new Vector2(0, 0f), true); // –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (13, 10)
        float playerStartX = 13f; // X = 13
        float playerStartY = 10f; // Y = 10

        System.out.println("üéÆ –ò–≥—Ä–æ–∫ —Å–ø–∞–≤–Ω–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: (" + playerStartX + ", " + playerStartY + ")");
        player = new Player(world, playerStartX, playerStartY);
        enemies = new Array<>();

        // –†–∞–∑–º–µ—â–∞–µ–º –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –∫–∞—Ä—Ç—ã 20x15
        enemies.add(new Enemy(world, 5, 7, 3, 8));   // –õ–µ–≤–∞—è —á–∞—Å—Ç—å
        enemies.add(new Enemy(world, 15, 7, 13, 17)); // –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
        enemies.add(new Enemy(world, 10, 3, 8, 12));  // –¶–µ–Ω—Ç—Ä –≤–Ω–∏–∑—É
        createCollisionBodiesFromMap();
        loadGame(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        saveGame(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É—Ä–æ–≤–Ω—è
    }

    private void createCollisionBodiesFromMap() {
        int tileWidth = map.getProperties().get("tilewidth", Integer.class);
        int tileHeight = map.getProperties().get("tileheight", Integer.class);
        int width = map.getProperties().get("width", Integer.class);
        int height = map.getProperties().get("height", Integer.class);

        // –ò—â–µ–º —Å–ª–æ–π –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
        com.badlogic.gdx.maps.tiled.TiledMapTileLayer layer = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get("Walls");
        if (layer == null) {
            layer = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get("Ground");
            System.out.println("‚ö†Ô∏è –°–ª–æ–π Walls –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º Ground");
        }
        if (layer == null) {
            layer = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get("–ü—Ä–æ—à–∞—Ä–æ–∫ –ø–ª–∏—Ç–æ–∫ 1");
            System.out.println("‚ö†Ô∏è –°–ª–æ–π Ground –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º '–ü—Ä–æ—à–∞—Ä–æ–∫ –ø–ª–∏—Ç–æ–∫ 1'");
        }
        if (layer == null) {
            // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ–π
            if (map.getLayers().getCount() > 0) {
                layer = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get(0);
                System.out.println("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ–π: " + layer.getName());
            }
        }
        if (layer == null) {
            System.out.println("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Å–ª–æ–π –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π!");
            return;
        }

        System.out.println("üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–π –¥–ª—è –∫–∞—Ä—Ç—ã " + width + "x" + height);
        System.out.println("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É: –≥—Ä–∞–Ω–∏—Ü—ã + —Å—Ç–µ–Ω—ã –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ");

        // ID —Ç–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–µ–Ω–∞–º–∏ (—Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ö–æ–¥ —Å–≤–µ—Ä—Ö—É)
        int[] wallTileIds = {
            // –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã —Å –ø—Ä–æ—Ö–æ–¥–æ–º —Å–≤–µ—Ä—Ö—É (—É–±–∏—Ä–∞–µ–º 2 —Ç–∞–π–ª–∞ –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∞)
            200, 201, 202, 203, 204, 205, 206, 207, 208, 209, /* 210, 211, */ 212, 213, 214, 215, 216, 217, 218, 219, // –≤–µ—Ä—Ö —Å –ø—Ä–æ—Ö–æ–¥–æ–º
            543, 603, 663, 723, 2823, 2883, 2943, 3003, // –ª–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            1138, 1198, 1258, 1378, 1438, 1018, 1887, 2000, // –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 2698, // –Ω–∏–∑
            // –°—Ç–µ–Ω—ã –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –∫–∞—Ä—Ç—ã
            2132, 850
        };

        int collisionCount = 0;
        int totalTiles = 0;
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell cell = layer.getCell(x, y);
                if (cell != null && cell.getTile() != null) {
                    totalTiles++;
                    int tileId = cell.getTile().getId();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–∞–π–ª —Å—Ç–µ–Ω–æ–π
                    boolean isWall = false;
                    for (int wallId : wallTileIds) {
                        if (tileId == wallId) {
                            isWall = true;
                            break;
                        }
                    }

                    if (isWall) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–ª–ª–∏–∑–∏—è —Ä—è–¥–æ–º —Å –º–µ—Å—Ç–æ–º —Å–ø–∞–≤–Ω–∞ –∏–≥—Ä–æ–∫–∞ (–¥–≤–µ—Ä–∏)
                        float playerStartX = 13f;
                        float playerStartY = 10f;

                        // –£–±–∏—Ä–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–≤–µ—Ä–µ–π (–æ–∫–æ–ª–æ –º–µ—Å—Ç–∞ —Å–ø–∞–≤–Ω–∞ –∏–≥—Ä–æ–∫–∞)
                        boolean nearPlayerSpawn = (Math.abs(x - playerStartX) <= 2 && Math.abs(y - playerStartY) <= 2);

                        if (!nearPlayerSpawn) {
                            System.out.println("üîß –°–æ–∑–¥–∞—ë–º —Å—Ç–µ–Ω—É ID " + tileId + " –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (" + x + "," + y + ")");
                            BodyDef bodyDef = new BodyDef();
                            bodyDef.type = BodyDef.BodyType.StaticBody;
                            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                            bodyDef.position.set(x + 0.5f, y + 0.5f);
                            Body body = world.createBody(bodyDef);
                            PolygonShape shape = new PolygonShape();
                            shape.setAsBox(0.5f, 0.5f);
                            body.createFixture(shape, 0);
                            shape.dispose();
                            collisionCount++;
                        } else {
                            System.out.println("üö™ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–≤–µ—Ä–µ–π –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (" + x + "," + y + ")");
                        }
                    }
                }
            }
        }
        System.out.println("üîß –í—Å–µ–≥–æ —Ç–∞–π–ª–æ–≤ –≤ —Å–ª–æ–µ: " + totalTiles);
        System.out.println("‚úì –°–æ–∑–¥–∞–Ω–æ " + collisionCount + " –∫–æ–ª–ª–∏–∑–∏–æ–Ω–Ω—ã—Ö —Ç–µ–ª");
    }

    private void saveGame() {
        Preferences prefs = Gdx.app.getPreferences("save");
        prefs.putString("level", levelName);
        prefs.putFloat("player_x", player.getPosition().x);
        prefs.putFloat("player_y", player.getPosition().y);
        prefs.putInteger("player_health", player.getHealth());
        prefs.putInteger("player_keys", player.getKeys());
        prefs.putInteger("player_seals", player.getSeals());
        prefs.flush();
    }

    private void loadGame() {
        Preferences prefs = Gdx.app.getPreferences("save");
        if (prefs.contains("level") && prefs.getString("level").equals(levelName)) {
            float x = prefs.getFloat("player_x", 2f);
            float y = prefs.getFloat("player_y", 2f);
            player.body.setTransform(x, y, 0);
            player.setHealth(prefs.getInteger("player_health", 3));
            player.setKeys(prefs.getInteger("player_keys", 0));
            player.setSeals(prefs.getInteger("player_seals", 0));
        }
    }

    // –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —É—Ä–æ–≤–Ω—è
    public void endLevel() {
        saveGame();
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã
    }

    @Override
    public void show() {}

    private boolean debugPrinted = false;

    @Override
    public void render(float delta) {
        world.step(delta, 6, 2);
        player.update(delta);
        for (Enemy e : enemies) e.update(delta, player.getPosition());

        // –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã 20x15 —Ç–∞–π–ª–æ–≤
        Vector2 playerPos = player.getPosition();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –∫–∞—Ä—Ç—ã 20x15)
        if (playerPos.x > 17f && playerPos.y < 3f) { // –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –¥–ª—è –∫–∞—Ä—Ç—ã 20x15
            System.out.println("üéØ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!");
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            if (game != null) {
                game.setScreen(new GameScreen(game, "maps/level_2.tmx")); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 2
            }
        }

        camera.position.set(10f, 7.5f, 0); // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ç–∞–π–ª–æ–≤
        camera.update();

        if (!debugPrinted) {
            System.out.println("=== –û–¢–õ–ê–î–ö–ê –†–ï–ù–î–ï–†–ò–ù–ì–ê ===");
            System.out.println("–ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã: " + camera.position);
            System.out.println("–†–∞–∑–º–µ—Ä viewport –∫–∞–º–µ—Ä—ã: " + camera.viewportWidth + "x" + camera.viewportHeight);
            System.out.println("–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: " + player.getPosition());
            System.out.println("–ö–∞—Ä—Ç–∞ –Ω–µ null: " + (map != null));
            System.out.println("–†–µ–Ω–¥–µ—Ä–µ—Ä –Ω–µ null: " + (mapRenderer != null));
            debugPrinted = true;
        }

        Gdx.gl.glClearColor(0.1f, 0.1f, 0.2f, 1); // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∏–≥—Ä—ã
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É
        if (mapRenderer != null && map != null) {
            mapRenderer.setView(camera);
            mapRenderer.render();
        }

        batch.setProjectionMatrix(camera.combined);
        batch.begin();
        // –í–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        player.render(batch);
        for (Enemy e : enemies) e.render(batch);
        batch.end();

        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
        if (showExitConfirm) {
            renderExitDialog();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
        if (showExitConfirm) {
            if (Gdx.input.isKeyJustPressed(Input.Keys.LEFT) || Gdx.input.isKeyJustPressed(Input.Keys.RIGHT)) {
                exitSelected = 1 - exitSelected;
            }
            if (Gdx.input.isKeyJustPressed(Input.Keys.ENTER) || Gdx.input.isKeyJustPressed(Input.Keys.SPACE)) {
                if (exitSelected == 0) { // –î–∞
                    if (game != null) {
                        game.setScreen(new FirstScreen(game));
                    }
                } else { // –ù–µ—Ç
                    showExitConfirm = false;
                }
            }
            if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) {
                showExitConfirm = false;
            }
            return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞ –¥–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
        if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) {
            showExitConfirm = true;
            exitSelected = 0;
        }
    }

    @Override
    public void resize(int width, int height) {
        // –ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        float mapWidth = 20f;  // –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã –≤ —Ç–∞–π–ª–∞—Ö
        float mapHeight = 15f; // –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã –≤ —Ç–∞–π–ª–∞—Ö

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        float screenAspectRatio = (float) width / height;
        float mapAspectRatio = mapWidth / mapHeight; // 20/15 = 1.33

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∫–∞—Ä—Ç—É —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        float padding = 1.5f; // –û—Ç—Å—Ç—É–ø –≤–æ–∫—Ä—É–≥ –∫–∞—Ä—Ç—ã

        if (screenAspectRatio > mapAspectRatio) {
            // –≠–∫—Ä–∞–Ω —à–∏—Ä–µ –∫–∞—Ä—Ç—ã - –ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            camera.viewportHeight = mapHeight + padding;
            camera.viewportWidth = camera.viewportHeight * screenAspectRatio;
        } else {
            // –≠–∫—Ä–∞–Ω —É–∂–µ –∫–∞—Ä—Ç—ã - –ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
            camera.viewportWidth = mapWidth + padding;
            camera.viewportHeight = camera.viewportWidth / screenAspectRatio;
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã
        camera.position.set(mapWidth / 2f, mapHeight / 2f, 0);
        camera.update();

        System.out.println("üîß RESIZE DEBUG:");
        System.out.println("   Screen: " + width + "x" + height + " (aspect: " + String.format("%.2f", screenAspectRatio) + ")");
        System.out.println("   Map: " + mapWidth + "x" + mapHeight + " (aspect: " + String.format("%.2f", mapAspectRatio) + ")");
        System.out.println("   Viewport: " + String.format("%.1f", camera.viewportWidth) + "x" + String.format("%.1f", camera.viewportHeight));
        System.out.println("   Camera pos: " + String.format("%.1f", camera.position.x) + "," + String.format("%.1f", camera.position.y));
    }

    @Override
    public void pause() {}
    @Override
    public void resume() {}
    @Override
    public void hide() {}
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
    private void renderExitDialog() {
        int winW = Gdx.graphics.getWidth();
        int winH = Gdx.graphics.getHeight();

        // –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è UI
        OrthographicCamera uiCamera = new OrthographicCamera();
        uiCamera.setToOrtho(false, winW, winH);
        uiCamera.update();

        String msg = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?";
        exitLayout.setText(exitTitleFont, msg);
        float boxW = Math.max(exitLayout.width + 80, 400); // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        float boxH = 180;
        float boxX = (winW - boxW) / 2f;
        float boxY = (winH - boxH) / 2f;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –¥–ª—è UI
        exitShapeRenderer.setProjectionMatrix(uiCamera.combined);

        // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        exitShapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
        exitShapeRenderer.setColor(0, 0, 0, 0.7f);
        exitShapeRenderer.rect(0, 0, winW, winH);

        // –§–æ–Ω –¥–∏–∞–ª–æ–≥–∞
        exitShapeRenderer.setColor(0.2f, 0.2f, 0.2f, 0.95f);
        exitShapeRenderer.rect(boxX, boxY, boxW, boxH);

        // –†–∞–º–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        exitShapeRenderer.setColor(0.6f, 0.6f, 0.6f, 1f);
        exitShapeRenderer.rect(boxX - 2, boxY - 2, boxW + 4, 2); // –≤–µ—Ä—Ö
        exitShapeRenderer.rect(boxX - 2, boxY + boxH, boxW + 4, 2); // –Ω–∏–∑
        exitShapeRenderer.rect(boxX - 2, boxY, 2, boxH); // –ª–µ–≤–æ
        exitShapeRenderer.rect(boxX + boxW, boxY, 2, boxH); // –ø—Ä–∞–≤–æ
        exitShapeRenderer.end();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        batch.setProjectionMatrix(uiCamera.combined);
        batch.begin();

        // –¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        exitTitleFont.setColor(Color.WHITE);
        exitTitleFont.draw(batch, msg, boxX + (boxW - exitLayout.width) / 2f, boxY + boxH - 40);

        // –ö–Ω–æ–ø–∫–∏
        String yes = "–î–∞";
        String no = "–ù–µ—Ç";
        exitLayout.setText(exitFont, yes);
        float yesX = boxX + 60;
        float btnY = boxY + 60;
        exitLayout.setText(exitFont, no);
        float noX = boxX + boxW - 60 - exitLayout.width;

        // –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if (exitSelected == 0) {
            exitFont.setColor(Color.GOLD);
            exitFont.draw(batch, yes, yesX, btnY);
            exitFont.setColor(Color.LIGHT_GRAY);
            exitFont.draw(batch, no, noX, btnY);
        } else {
            exitFont.setColor(Color.LIGHT_GRAY);
            exitFont.draw(batch, yes, yesX, btnY);
            exitFont.setColor(Color.GOLD);
            exitFont.draw(batch, no, noX, btnY);
        }
        batch.end();
    }

    @Override
    public void dispose() {
        if (map != null) map.dispose();
        if (mapRenderer != null) mapRenderer.dispose();
        if (batch != null) batch.dispose();
        if (world != null) world.dispose();
        if (shapeRenderer != null) shapeRenderer.dispose();
        if (testTexture != null) testTexture.dispose();
        if (exitFont != null) exitFont.dispose();
        if (exitTitleFont != null) exitTitleFont.dispose();
        if (exitShapeRenderer != null) exitShapeRenderer.dispose();
    }
}
