package com.nikita.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.physics.box2d.Box2D;
import com.badlogic.gdx.physics.box2d.World;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.Preferences;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.PolygonShape;

public class GameScreen implements Screen {
    private NikitaGame game;
    private OrthographicCamera camera;
    private SpriteBatch batch;
    private TiledMap map;
    private OrthogonalTiledMapRenderer mapRenderer;
    private World world;
    private Player player;
    private Array<Enemy> enemies;
    private String levelName;
    private com.badlogic.gdx.graphics.glutils.ShapeRenderer shapeRenderer;
    private com.badlogic.gdx.graphics.Texture testTexture;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —É—Ä–æ–≤–Ω—è
    private int currentLevelPart = 1; // –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —É—Ä–æ–≤–Ω—è
    private int totalLevelParts = 3;  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π —É—Ä–æ–≤–Ω—è
    private Array<Vector2> levelPartTransitions; // –¢–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —É—Ä–æ–≤–Ω—è
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    private float lastTransitionTime = 0f;
    private final float TRANSITION_COOLDOWN = 2.0f; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    private boolean transitionInProgress = false;
    private float gameTime = 0f; // –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    private boolean levelCompleted = false;
    private float levelCompleteTimer = 0f;
    private final float LEVEL_COMPLETE_DELAY = 2f; // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    private String nextLevelName = "maps/level_1.tmx"; // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
    private Array<Body> collisionBodies;
    private boolean collisionEnabled = true;

    // –ü–æ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
    private boolean showExitConfirm = false;
    private int exitSelected = 0; // 0 - –î–∞, 1 - –ù–µ—Ç
    private BitmapFont exitFont, exitTitleFont;
    private GlyphLayout exitLayout = new GlyphLayout();
    private ShapeRenderer exitShapeRenderer;

    public GameScreen() {
        this(null, "maps/test_small.tmx"); // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }

    public GameScreen(String levelName) {
        this(null, levelName);
    }

    public GameScreen(NikitaGame game, String levelName) {
        this.game = game;
        this.levelName = levelName;
        Box2D.init();
        camera = new OrthographicCamera();
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç—ã 20x15 —Ç–∞–π–ª–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        camera.setToOrtho(false, 22, 17); // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        batch = new SpriteBatch();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ShapeRenderer –∏ —Ç–µ—Å—Ç–æ–≤—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
        shapeRenderer = new com.badlogic.gdx.graphics.glutils.ShapeRenderer();
        exitShapeRenderer = new ShapeRenderer();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
        FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("Roboto-Regular.ttf"));
        FreeTypeFontGenerator.FreeTypeFontParameter parameter = new FreeTypeFontGenerator.FreeTypeFontParameter();
        parameter.size = 32;
        parameter.characters = FreeTypeFontGenerator.DEFAULT_CHARS + "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è";
        exitFont = generator.generateFont(parameter);
        parameter.size = 40;
        parameter.color = Color.WHITE;
        exitTitleFont = generator.generateFont(parameter);
        generator.dispose();

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –±–µ–ª—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        com.badlogic.gdx.graphics.Pixmap pixmap = new com.badlogic.gdx.graphics.Pixmap(100, 100, com.badlogic.gdx.graphics.Pixmap.Format.RGBA8888);
        pixmap.setColor(com.badlogic.gdx.graphics.Color.WHITE);
        pixmap.fill();
        testTexture = new com.badlogic.gdx.graphics.Texture(pixmap);
        pixmap.dispose();
        try {
            System.out.println("=== –û–¢–õ–ê–î–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ö–ê–†–¢–´ ===");
            System.out.println("üçé macOS Debug Info:");
            System.out.println("   OS: " + System.getProperty("os.name"));
            System.out.println("   Java: " + System.getProperty("java.version"));
            System.out.println("   OpenGL Vendor: " + Gdx.gl.glGetString(Gdx.gl.GL_VENDOR));
            System.out.println("   OpenGL Renderer: " + Gdx.gl.glGetString(Gdx.gl.GL_RENDERER));
            System.out.println("   OpenGL Version: " + Gdx.gl.glGetString(Gdx.gl.GL_VERSION));

            System.out.println("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É: " + levelName);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (!Gdx.files.internal(levelName).exists()) {
                System.err.println("–û–®–ò–ë–ö–ê: –§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: " + levelName);
                throw new RuntimeException("–§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: " + levelName);
            }
            System.out.println("‚úì –§–∞–π–ª –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω");

            map = new TmxMapLoader().load(levelName);
            System.out.println("‚úì –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ
            System.out.println("–†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã: " + map.getProperties().get("width") + "x" + map.getProperties().get("height"));
            System.out.println("–†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞: " + map.getProperties().get("tilewidth") + "x" + map.getProperties().get("tileheight"));
            System.out.println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤: " + map.getLayers().getCount());

            for (int i = 0; i < map.getLayers().getCount(); i++) {
                System.out.println("–°–ª–æ–π " + i + ": " + map.getLayers().get(i).getName() + " (—Ç–∏–ø: " + map.getLayers().get(i).getClass().getSimpleName() + ")");
            }

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–ª—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–π–ª–æ–≤)
            com.badlogic.gdx.maps.tiled.TiledMapTileLayer groundLayer = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get(0);
            if (groundLayer != null) {
                System.out.println("üîç –ê–Ω–∞–ª–∏–∑ —Ç–∞–π–ª–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã:");
                int count = 0;
                for (int x = 45; x <= 55 && count < 5; x++) {
                    for (int y = 8; y <= 12 && count < 5; y++) {
                        com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell cell = groundLayer.getCell(x, y);
                        if (cell != null && cell.getTile() != null) {
                            System.out.println("   –¢–∞–π–ª (" + x + "," + y + "): ID " + cell.getTile().getId());
                            count++;
                        }
                    }
                }
            }

            mapRenderer = new OrthogonalTiledMapRenderer(map, 1f/32f); // –ú–∞—Å—à—Ç–∞–± –¥–ª—è —Ç–∞–π–ª–æ–≤ 32x32
            System.out.println("‚úì –†–µ–Ω–¥–µ—Ä–µ—Ä –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω");

        } catch (Exception e) {
            System.err.println("–û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
        world = new World(new Vector2(0, 0f), true); // –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        player = new Player(world, 2, 2);
        enemies = new Array<>();
        collisionBodies = new Array<>(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–ª–ª–∏–∑–∏–æ–Ω–Ω—ã—Ö —Ç–µ–ª

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —É—Ä–æ–≤–Ω—è
        levelPartTransitions = new Array<>();
        levelPartTransitions.add(new Vector2(17, 7.5f)); // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 1 –≤ —á–∞—Å—Ç—å 2 (–ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã)
        levelPartTransitions.add(new Vector2(3, 7.5f));  // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 2 –≤ —á–∞—Å—Ç—å 1 (–ª–µ–≤—ã–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã)
        levelPartTransitions.add(new Vector2(10, 13));   // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 1/2 –≤ —á–∞—Å—Ç—å 3 (–≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã)
        levelPartTransitions.add(new Vector2(10, 2));    // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 3 –≤ —á–∞—Å—Ç—å 1 (–Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        levelPartTransitions.add(new Vector2(10, 12));   // –¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å (–±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω–∞—è)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–∞–≥–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
        initLevelPart(currentLevelPart);

        createCollisionBodiesFromMap();
        loadGame(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        saveGame(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É—Ä–æ–≤–Ω—è
    }

    private void createCollisionBodiesFromMap() {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–ª–∏–∑–∏–æ–Ω–Ω—ã–µ —Ç–µ–ª–∞
        for (Body body : collisionBodies) {
            if (body != null) {
                world.destroyBody(body);
            }
        }
        collisionBodies.clear();
        
        int tileWidth = map.getProperties().get("tilewidth", Integer.class);
        int tileHeight = map.getProperties().get("tileheight", Integer.class);
        int width = map.getProperties().get("width", Integer.class);
        int height = map.getProperties().get("height", Integer.class);

        // –ò—â–µ–º —Å–ª–æ–π Walls, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º Ground, –Ω–æ —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        com.badlogic.gdx.maps.tiled.TiledMapTileLayer layer = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get("Walls");
        if (layer == null) {
            layer = (com.badlogic.gdx.maps.tiled.TiledMapTileLayer) map.getLayers().get("Ground");
            System.out.println("‚ö†Ô∏è –°–ª–æ–π Walls –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Ground —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ç–∞–π–ª–æ–≤");
        }
        if (layer == null) return;

        // ID —Ç–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–µ–Ω–∞–º–∏ (–Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã–º–∏)
        // –£–º–µ–Ω—å—à–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        int[] wallTileIds = {15, 16, 17, 18, 19, 20}; // –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–µ–Ω—ã

        int collisionCount = 0;
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell cell = layer.getCell(x, y);
                if (cell != null && cell.getTile() != null) {
                    int tileId = cell.getTile().getId();

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–∞–π–ª —Å—Ç–µ–Ω–æ–π
                    boolean isWall = false;
                    for (int wallId : wallTileIds) {
                        if (tileId == wallId) {
                            isWall = true;
                            break;
                        }
                    }

                    if (isWall) {
                        BodyDef bodyDef = new BodyDef();
                        bodyDef.type = BodyDef.BodyType.StaticBody;
                        // –¶–µ–Ω—Ç—Ä —Ç–∞–π–ª–∞ (Box2D: 1 —é–Ω–∏—Ç = 1 —Ç–∞–π–ª)
                        bodyDef.position.set(x + 0.5f, y + 0.5f);
                        Body body = world.createBody(bodyDef);
                        PolygonShape shape = new PolygonShape();
                        shape.setAsBox(0.4f, 0.4f); // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–∏–∑–∏–∏
                        body.createFixture(shape, 0);
                        shape.dispose();
                        collisionBodies.add(body); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        collisionCount++;
                    }
                }
            }
        }
        System.out.println("‚úì –°–æ–∑–¥–∞–Ω–æ " + collisionCount + " –∫–æ–ª–ª–∏–∑–∏–æ–Ω–Ω—ã—Ö —Ç–µ–ª");
    }

    private void saveGame() {
        Preferences prefs = Gdx.app.getPreferences("save");
        prefs.putString("level", levelName);
        prefs.putFloat("player_x", player.getPosition().x);
        prefs.putFloat("player_y", player.getPosition().y);
        prefs.putInteger("player_health", player.getHealth());
        prefs.putInteger("player_keys", player.getKeys());
        prefs.putInteger("player_seals", player.getSeals());
        prefs.flush();
    }

    private void loadGame() {
        Preferences prefs = Gdx.app.getPreferences("save");
        if (prefs.contains("level") && prefs.getString("level").equals(levelName)) {
            float x = prefs.getFloat("player_x", 2f);
            float y = prefs.getFloat("player_y", 2f);
            player.body.setTransform(x, y, 0);
            player.setHealth(prefs.getInteger("player_health", 4));
            player.setKeys(prefs.getInteger("player_keys", 0));
            player.setSeals(prefs.getInteger("player_seals", 0));
        }
    }

    // –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —É—Ä–æ–≤–Ω—è
    public void endLevel() {
        saveGame();
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
     */
    private void checkLevelCompletion() {
        if (levelCompleted) {
            levelCompleteTimer += Gdx.graphics.getDeltaTime();
            System.out.println("‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è: " + levelCompleteTimer + "/" + LEVEL_COMPLETE_DELAY);
            
            if (levelCompleteTimer >= LEVEL_COMPLETE_DELAY) {
                // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                System.out.println("üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!");
                goToNextLevel();
            }
        }
    }
    
    /**
     * –û—Ç–º–µ—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
     */
    public void completeLevel() {
        if (!levelCompleted) {
            levelCompleted = true;
            levelCompleteTimer = 0f;
            System.out.println("üéØ –£—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π!");
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if (levelName != null && (levelName.contains("level_0") || levelName.contains("test_small"))) {
                System.out.println("üé¨ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç—Å—Ü–µ–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è...");
            } else {
                System.out.println("üéâ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å...");
            }
        }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ
     */
    private String getNextLevelName() {
        if (levelName == null) return "maps/level_0.tmx";
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ
        if (levelName.contains("level_0") || levelName.contains("test_small")) {
            return "maps/level_2.tmx";
        } else if (levelName.contains("level_2")) {
            return "maps/level_true_fixed.tmx";
        } else if (levelName.contains("level_true") || levelName.contains("level_true_fixed")) {
            // –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return "victory";
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            return "maps/level_0.tmx";
        }
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
     */
    private void goToNextLevel() {
        String nextLevel = getNextLevelName();
        
        if (nextLevel.equals("victory")) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥—ã
            System.out.println("üéâ –ü–æ–±–µ–¥–∞! –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            if (game != null) {
                game.setScreen(new FirstScreen(game));
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç—Å—Ü–µ–Ω—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if (levelName != null && (levelName.contains("level_0") || levelName.contains("test_small"))) {
                System.out.println("üé¨ –ó–∞–ø—É—Å–∫ –∫–∞—Ç—Å—Ü–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!");
                if (game != null) {
                    game.setScreen(new Level1EndCutscene(game));
                }
            } else {
                // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                System.out.println("üéâ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: " + nextLevel);
                if (game != null) {
                    game.setScreen(new GameScreen(game, nextLevel));
                }
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–∞–≥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
     * @param levelPart –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è (1, 2, 3)
     */
    private void initLevelPart(int levelPart) {
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
        for (Enemy enemy : enemies) {
            if (enemy.body != null) {
                world.destroyBody(enemy.body);
            }
        }
        enemies.clear();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
        switch (levelPart) {
            case 1:
                // –í—Ä–∞–≥–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
                enemies.add(new Enemy(world, 8, 2, 7, 12));
                enemies.add(new Enemy(world, 15, 2, 14, 18));
                break;
            case 2:
                // –í—Ä–∞–≥–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
                enemies.add(new Enemy(world, 5, 5, 3, 8));
                enemies.add(new Enemy(world, 12, 8, 10, 15));
                enemies.add(new Enemy(world, 18, 3, 16, 19));
                break;
            case 3:
                // –í—Ä–∞–≥–∏ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è (–±–æ—Å—Å)
                enemies.add(new Enemy(world, 10, 7, 8, 12));
                enemies.add(new Enemy(world, 5, 10, 3, 7));
                enemies.add(new Enemy(world, 15, 10, 13, 17));
                break;
        }

        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —á–∞—Å—Ç—å —É—Ä–æ–≤–Ω—è " + levelPart + " —Å " + enemies.size + " –≤—Ä–∞–≥–∞–º–∏");
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —á–∞—Å—Ç—å —É—Ä–æ–≤–Ω—è
     * @param newLevelPart –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
     */
    private void switchLevelPart(int newLevelPart) {
        if (newLevelPart < 1 || newLevelPart > totalLevelParts) {
            System.out.println("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å —É—Ä–æ–≤–Ω—è: " + newLevelPart);
            return;
        }

        if (newLevelPart == currentLevelPart) {
            return; // –£–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
        if (gameTime - lastTransitionTime < TRANSITION_COOLDOWN) {
            System.out.println("‚è≥ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞, –∂–¥–µ–º...");
            return;
        }

        if (transitionInProgress) {
            System.out.println("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ");
            return;
        }

        transitionInProgress = true;
        lastTransitionTime = gameTime;

        System.out.println("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ —Å —á–∞—Å—Ç–∏ " + currentLevelPart + " –Ω–∞ —á–∞—Å—Ç—å " + newLevelPart);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        Vector2 playerPos = player.getPosition();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å –±—É—Ñ–µ—Ä–Ω–æ–π –∑–æ–Ω–æ–π
        if (currentLevelPart == 1 && newLevelPart == 2) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 1 –≤ —á–∞—Å—Ç—å 2 (—Å–ø—Ä–∞–≤–∞)
            player.body.setTransform(3, playerPos.y, 0);
        } else if (currentLevelPart == 2 && newLevelPart == 1) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 2 –≤ —á–∞—Å—Ç—å 1 (—Å–ª–µ–≤–∞)
            player.body.setTransform(17, playerPos.y, 0);
        } else if (newLevelPart == 3) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Å—Ç—å 3 (—Å–≤–µ—Ä—Ö—É) - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥–∞–ª—å—à–µ –æ—Ç —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
            player.body.setTransform(10, 4, 0);
        } else if (currentLevelPart == 3) {
            // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 3 (—Å–Ω–∏–∑—É) - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥–∞–ª—å—à–µ –æ—Ç —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
            player.body.setTransform(10, 11, 0);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å —É—Ä–æ–≤–Ω—è
        currentLevelPart = newLevelPart;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–∞–≥–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π —á–∞—Å—Ç–∏ —É—Ä–æ–≤–Ω—è
        initLevelPart(currentLevelPart);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        Gdx.app.postRunnable(new Runnable() {
            @Override
            public void run() {
                transitionInProgress = false;
            }
        });
    }

    @Override
    public void show() {}

    private boolean debugPrinted = false;

    @Override
    public void render(float delta) {
        // –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        gameTime += delta;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞ (–≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞)
        if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) {
            showExitConfirm = true;
            exitSelected = 0;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
        if (showExitConfirm) {
            if (Gdx.input.isKeyJustPressed(Input.Keys.LEFT) || Gdx.input.isKeyJustPressed(Input.Keys.RIGHT)) {
                exitSelected = 1 - exitSelected;
            }
            if (Gdx.input.isKeyJustPressed(Input.Keys.ENTER) || Gdx.input.isKeyJustPressed(Input.Keys.SPACE)) {
                if (exitSelected == 0) { // –î–∞
                    if (game != null) {
                        game.setScreen(new FirstScreen(game));
                    }
                } else { // –ù–µ—Ç
                    showExitConfirm = false;
                }
            }
            if (Gdx.input.isKeyJustPressed(Input.Keys.ESCAPE)) {
                showExitConfirm = false;
            }
            
            // –†–µ–Ω–¥–µ—Ä–∏–º –¥–∏–∞–ª–æ–≥ –≤—ã—Ö–æ–¥–∞
            renderExitDialog();
            return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞ –¥–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç
        }

        world.step(delta, 6, 2);
        player.update(delta);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        checkLevelCompletion();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç–∞–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ –≤—Ä–∞–≥–∞–º
        if (player.canAttackHit()) {
            Vector2 playerPos = player.getPosition();
            float attackRange = 1.5f; // –î–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞

            for (int i = 0; i < enemies.size; i++) {
                Enemy enemy = enemies.get(i);
                if (!enemy.isDead()) {
                    Vector2 enemyPos = enemy.getPosition();
                    float distance = playerPos.dst(enemyPos);

                    if (distance <= attackRange) {
                        enemy.takeDamage(1); // –ù–∞–Ω–æ—Å–∏–º 1 —É—Ä–æ–Ω (–≤—Ä–∞–≥ —É–º—Ä–µ—Ç –ø–æ—Å–ª–µ 2 —É–¥–∞—Ä–æ–≤)
                        player.setAttackHit(); // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∞—Ç–∞–∫–∞ –ø–æ–ø–∞–ª–∞
                        System.out.println("üó°Ô∏è –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫–æ–≤–∞–ª –≤—Ä–∞–≥–∞! –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: " + enemy.getHealth());
                        break; // –ê—Ç–∞–∫—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –∑–∞ —Ä–∞–∑
                    }
                }
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ö –∞—Ç–∞–∫ –Ω–∞ –∏–≥—Ä–æ–∫–∞
        for (int i = enemies.size - 1; i >= 0; i--) {
            Enemy enemy = enemies.get(i);

            if (enemy.isDead()) {
                // –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã—Ö –≤—Ä–∞–≥–æ–≤ –∏–∑ –º–∏—Ä–∞ –∏ –∏–∑ —Å–ø–∏—Å–∫–∞
                world.destroyBody(enemy.body);
                enemies.removeIndex(i);
                System.out.println("üíÄ –í—Ä–∞–≥ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞!");
            } else {
                enemy.update(delta, player.getPosition());

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞
                Vector2 playerPos = player.getPosition();
                Vector2 enemyPos = enemy.getPosition();
                float distance = playerPos.dst(enemyPos);

                if (distance <= 1.0f && !player.isInvulnerable()) {
                    player.takeDamage(1); // –ù–∞–Ω–æ—Å–∏–º 1 —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
                    System.out.println("‚öîÔ∏è –í—Ä–∞–≥ –∞—Ç–∞–∫–æ–≤–∞–ª –∏–≥—Ä–æ–∫–∞! –ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞: " + player.getHealth());
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è (–≤—Å–µ –≤—Ä–∞–≥–∏ —É–±–∏—Ç—ã –∏–ª–∏ –∏–≥—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞)
        if (enemies.size == 0 && !levelCompleted && currentLevelPart == totalLevelParts) {
            System.out.println("üéØ –í—Å–µ –≤—Ä–∞–≥–∏ —É–±–∏—Ç—ã! –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω!");
            completeLevel();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
        if (player.isDead()) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω Game Over
            System.out.println("üíÄ –ò–≥—Ä–æ–∫ —É–º–µ—Ä! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω Game Over");

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —ç–∫—Ä–∞–Ω Game Over (3 —Å–µ–∫—É–Ω–¥—ã)
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —Å–º–µ—Ä—Ç–∏
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω (–∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω Game Over, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)
            if (game != null) {
                game.setScreen(new FirstScreen(game));
            }
            return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ render
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ —É—Ä–æ–≤–Ω—è
        Vector2 playerPos = player.getPosition();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
        float transitionDistance = 3.0f; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –ª–µ–≥–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤

        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        if (Gdx.input.isKeyJustPressed(Input.Keys.F1)) {
            System.out.println("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:");
            System.out.println("   –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: " + playerPos);
            System.out.println("   –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç—å —É—Ä–æ–≤–Ω—è: " + currentLevelPart);
            System.out.println("   üí° –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ F1 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ");
            for (int i = 0; i < levelPartTransitions.size; i++) {
                Vector2 transPoint = levelPartTransitions.get(i);
                float dist = playerPos.dst(transPoint);
                System.out.println("   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ " + i + " (" + transPoint.x + "," + transPoint.y + "): " + dist);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å (–∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏)
        if (currentLevelPart == totalLevelParts && playerPos.dst(levelPartTransitions.get(4)) < transitionDistance && !levelCompleted) {
            // –ò–≥—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
            System.out.println("üéØ –ò–≥—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å!");
            System.out.println("   –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: " + playerPos);
            System.out.println("   –¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: " + levelPartTransitions.get(4));
            System.out.println("   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + playerPos.dst(levelPartTransitions.get(4)));
            System.out.println("   –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç—å: " + currentLevelPart + "/" + totalLevelParts);
            completeLevel();
        }
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª—é–±–æ–π —á–∞—Å—Ç–∏ –∏ —É–±–∏–ª –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
        else if (enemies.size == 0 && !levelCompleted) {
            System.out.println("üéØ –í—Å–µ –≤—Ä–∞–≥–∏ —É–±–∏—Ç—ã! –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω!");
            System.out.println("   –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: " + playerPos);
            System.out.println("   –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç—å: " + currentLevelPart + "/" + totalLevelParts);
            completeLevel();
        }
        // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 1 –≤ —á–∞—Å—Ç—å 2 (–ø—Ä–∞–≤—ã–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã)
        else if (currentLevelPart == 1 && playerPos.dst(levelPartTransitions.get(0)) < transitionDistance && !transitionInProgress) {
            System.out.println("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 1 –≤ —á–∞—Å—Ç—å 2 (–ø—Ä–∞–≤—ã–π –∫—Ä–∞–π)");
            switchLevelPart(2);
        }
        // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 2 –≤ —á–∞—Å—Ç—å 1 (–ª–µ–≤—ã–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã)
        else if (currentLevelPart == 2 && playerPos.dst(levelPartTransitions.get(1)) < transitionDistance && !transitionInProgress) {
            System.out.println("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 2 –≤ —á–∞—Å—Ç—å 1 (–ª–µ–≤—ã–π –∫—Ä–∞–π)");
            switchLevelPart(1);
        }
        // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 1 –∏–ª–∏ 2 –≤ —á–∞—Å—Ç—å 3 (–≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã)
        else if ((currentLevelPart == 1 || currentLevelPart == 2) &&
                 playerPos.dst(levelPartTransitions.get(2)) < transitionDistance && !transitionInProgress) {
            System.out.println("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ " + currentLevelPart + " –≤ —á–∞—Å—Ç—å 3 (–≤–µ—Ä—Ö–Ω–∏–π –∫—Ä–∞–π)");
            switchLevelPart(3);
        }
        // –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 3 –≤ —á–∞—Å—Ç—å 1 (–Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π –∫–∞—Ä—Ç—ã)
        else if (currentLevelPart == 3 && playerPos.dst(levelPartTransitions.get(3)) < transitionDistance && !transitionInProgress) {
            System.out.println("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —á–∞—Å—Ç–∏ 3 –≤ —á–∞—Å—Ç—å 1 (–Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π)");
            switchLevelPart(1);
        }
        
        // –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã 20x15 —Ç–∞–π–ª–æ–≤
        camera.position.set(10f, 7.5f, 0); // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ç–∞–π–ª–æ–≤
        camera.update();

        if (!debugPrinted) {
            System.out.println("=== –û–¢–õ–ê–î–ö–ê –†–ï–ù–î–ï–†–ò–ù–ì–ê ===");
            System.out.println("–ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã: " + camera.position);
            System.out.println("–†–∞–∑–º–µ—Ä viewport –∫–∞–º–µ—Ä—ã: " + camera.viewportWidth + "x" + camera.viewportHeight);
            System.out.println("–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: " + player.getPosition());
            System.out.println("–ö–∞—Ä—Ç–∞ –Ω–µ null: " + (map != null));
            System.out.println("–†–µ–Ω–¥–µ—Ä–µ—Ä –Ω–µ null: " + (mapRenderer != null));
            debugPrinted = true;
        }

        Gdx.gl.glClearColor(0.1f, 0.1f, 0.2f, 1); // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∏–≥—Ä—ã
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ä—Ç—É
        if (mapRenderer != null && map != null) {
            mapRenderer.setView(camera);
            mapRenderer.render();
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–≥—Ä–æ–∫–∞
        batch.setProjectionMatrix(camera.combined);
        batch.begin();
        player.render(batch);
        batch.end();

        // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Ä–∞–≥–æ–≤
        batch.begin();
        for (Enemy enemy : enemies) {
            enemy.render(batch);
        }
        batch.end();

        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        if (levelCompleted) {
            renderLevelCompleteIndicator();
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ F1)
        if (Gdx.input.isKeyPressed(Input.Keys.F1)) {
            renderTransitionPoints();
        }

        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
        // if (showExitConfirm) { // This block is now handled at the beginning of render
        //     renderExitDialog();
        // }
    }

    @Override
    public void resize(int width, int height) {
        // –ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        float mapWidth = 20f;  // –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã –≤ —Ç–∞–π–ª–∞—Ö
        float mapHeight = 15f; // –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã –≤ —Ç–∞–π–ª–∞—Ö

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        float screenAspectRatio = (float) width / height;
        float mapAspectRatio = mapWidth / mapHeight; // 20/15 = 1.33

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∫–∞—Ä—Ç—É —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        float padding = 1.5f; // –û—Ç—Å—Ç—É–ø –≤–æ–∫—Ä—É–≥ –∫–∞—Ä—Ç—ã

        if (screenAspectRatio > mapAspectRatio) {
            // –≠–∫—Ä–∞–Ω —à–∏—Ä–µ –∫–∞—Ä—Ç—ã - –ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            camera.viewportHeight = mapHeight + padding;
            camera.viewportWidth = camera.viewportHeight * screenAspectRatio;
        } else {
            // –≠–∫—Ä–∞–Ω —É–∂–µ –∫–∞—Ä—Ç—ã - –ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
            camera.viewportWidth = mapWidth + padding;
            camera.viewportHeight = camera.viewportWidth / screenAspectRatio;
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞—Ä—Ç—ã
        camera.position.set(mapWidth / 2f, mapHeight / 2f, 0);
        camera.update();

        System.out.println("üîß RESIZE DEBUG:");
        System.out.println("   Screen: " + width + "x" + height + " (aspect: " + String.format("%.2f", screenAspectRatio) + ")");
        System.out.println("   Map: " + mapWidth + "x" + mapHeight + " (aspect: " + String.format("%.2f", mapAspectRatio) + ")");
        System.out.println("   Viewport: " + String.format("%.1f", camera.viewportWidth) + "x" + String.format("%.1f", camera.viewportHeight));
        System.out.println("   Camera pos: " + String.format("%.1f", camera.position.x) + "," + String.format("%.1f", camera.position.y));
    }

    @Override
    public void pause() {}
    @Override
    public void resume() {}
    @Override
    public void hide() {}
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
    private void renderExitDialog() {
        int winW = Gdx.graphics.getWidth();
        int winH = Gdx.graphics.getHeight();

        // –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è UI
        OrthographicCamera uiCamera = new OrthographicCamera();
        uiCamera.setToOrtho(false, winW, winH);
        uiCamera.update();

        String msg = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?";
        exitLayout.setText(exitTitleFont, msg);
        float boxW = Math.max(exitLayout.width + 80, 400); // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        float boxH = 180;
        float boxX = (winW - boxW) / 2f;
        float boxY = (winH - boxH) / 2f;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –¥–ª—è UI
        exitShapeRenderer.setProjectionMatrix(uiCamera.combined);

        // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        exitShapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
        exitShapeRenderer.setColor(0, 0, 0, 0.7f);
        exitShapeRenderer.rect(0, 0, winW, winH);

        // –§–æ–Ω –¥–∏–∞–ª–æ–≥–∞
        exitShapeRenderer.setColor(0.2f, 0.2f, 0.2f, 0.95f);
        exitShapeRenderer.rect(boxX, boxY, boxW, boxH);

        // –†–∞–º–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        exitShapeRenderer.setColor(0.6f, 0.6f, 0.6f, 1f);
        exitShapeRenderer.rect(boxX - 2, boxY - 2, boxW + 4, 2); // –≤–µ—Ä—Ö
        exitShapeRenderer.rect(boxX - 2, boxY + boxH, boxW + 4, 2); // –Ω–∏–∑
        exitShapeRenderer.rect(boxX - 2, boxY, 2, boxH); // –ª–µ–≤–æ
        exitShapeRenderer.rect(boxX + boxW, boxY, 2, boxH); // –ø—Ä–∞–≤–æ
        exitShapeRenderer.end();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        batch.setProjectionMatrix(uiCamera.combined);
        batch.begin();

        // –¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        exitTitleFont.setColor(Color.WHITE);
        exitTitleFont.draw(batch, msg, boxX + (boxW - exitLayout.width) / 2f, boxY + boxH - 40);

        // –ö–Ω–æ–ø–∫–∏
        String yes = "–î–∞";
        String no = "–ù–µ—Ç";
        exitLayout.setText(exitFont, yes);
        float yesX = boxX + 60;
        float btnY = boxY + 60;
        exitLayout.setText(exitFont, no);
        float noX = boxX + boxW - 60 - exitLayout.width;

        // –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if (exitSelected == 0) {
            exitFont.setColor(Color.GOLD);
            exitFont.draw(batch, yes, yesX, btnY);
            exitFont.setColor(Color.LIGHT_GRAY);
            exitFont.draw(batch, no, noX, btnY);
        } else {
            exitFont.setColor(Color.LIGHT_GRAY);
            exitFont.draw(batch, yes, yesX, btnY);
            exitFont.setColor(Color.GOLD);
            exitFont.draw(batch, no, noX, btnY);
        }
        batch.end();
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç –∏–Ω–¥–∏–∫–∞—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
     */
    private void renderLevelCompleteIndicator() {
        // –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        shapeRenderer.setProjectionMatrix(camera.combined);
        shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
        shapeRenderer.setColor(0, 0, 0, 0.7f);
        shapeRenderer.rect(0, 0, camera.viewportWidth, camera.viewportHeight);
        shapeRenderer.end();

        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        batch.setProjectionMatrix(camera.combined);
        batch.begin();
        
        String completeText = "üéØ –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω!";
        String nextLevelText = "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å...";
        String cutsceneText = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç—Å—Ü–µ–Ω–µ...";
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        exitLayout.setText(exitTitleFont, completeText);
        float textX = (camera.viewportWidth - exitLayout.width) / 2;
        float textY = camera.viewportHeight / 2 + 80;
        
        exitTitleFont.setColor(Color.GOLD);
        exitTitleFont.draw(batch, completeText, textX, textY);
        
        // –¢–µ–∫—Å—Ç –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
        exitLayout.setText(exitFont, nextLevelText);
        textX = (camera.viewportWidth - exitLayout.width) / 2;
        textY = camera.viewportHeight / 2;
        
        exitFont.setColor(Color.WHITE);
        exitFont.draw(batch, nextLevelText, textX, textY);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç—Å—Ü–µ–Ω—ã
        if (levelName != null && (levelName.contains("level_0") || levelName.contains("test_small"))) {
            exitLayout.setText(exitFont, cutsceneText);
            textX = (camera.viewportWidth - exitLayout.width) / 2;
            textY = camera.viewportHeight / 2 - 80;
            
            exitFont.setColor(Color.CYAN);
            exitFont.draw(batch, cutsceneText, textX, textY);
        }
        
        batch.end();
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    private void renderTransitionPoints() {
        if (mapRenderer == null || map == null) return;

        // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
        shapeRenderer.setProjectionMatrix(camera.combined);
        shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
        
        for (int i = 0; i < levelPartTransitions.size; i++) {
            Vector2 transPoint = levelPartTransitions.get(i);
            
            // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
            if (i == 4) {
                // –¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å - –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
                shapeRenderer.setColor(1, 0, 0, 0.7f);
            } else {
                // –û–±—ã—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ - –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                shapeRenderer.setColor(0, 1, 0, 0.5f);
            }
            
            shapeRenderer.circle(transPoint.x, transPoint.y, 0.5f);
        }
        
        shapeRenderer.end();

        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–∞–º–∏
        batch.setProjectionMatrix(camera.combined);
        batch.begin();
        
        for (int i = 0; i < levelPartTransitions.size; i++) {
            Vector2 transPoint = levelPartTransitions.get(i);
            String label;
            if (i == 4) {
                label = "NEXT"; // –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            } else {
                label = "T" + i; // –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            }
            
            exitLayout.setText(exitFont, label);
            float textX = transPoint.x + 0.8f;
            float textY = transPoint.y + 0.3f;
            
            if (i == 4) {
                exitFont.setColor(Color.RED);
            } else {
                exitFont.setColor(Color.WHITE);
            }
            
            exitFont.draw(batch, label, textX, textY);
        }
        
        batch.end();
    }

    @Override
    public void dispose() {
        if (map != null) map.dispose();
        if (mapRenderer != null) mapRenderer.dispose();
        if (batch != null) batch.dispose();
        if (world != null) world.dispose();
        if (shapeRenderer != null) shapeRenderer.dispose();
        if (testTexture != null) testTexture.dispose();
        if (exitFont != null) exitFont.dispose();
        if (exitTitleFont != null) exitTitleFont.dispose();
        if (exitShapeRenderer != null) exitShapeRenderer.dispose();
    }
}
