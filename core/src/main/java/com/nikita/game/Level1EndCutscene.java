package com.nikita.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.math.MathUtils;

public class Level1EndCutscene implements Screen {
    private NikitaGame game;
    private SpriteBatch batch;
    private BitmapFont font;
    private Texture background;
    private Music music;
    
    private float fadeIn = 0f;
    private float fadeOut = 0f;
    private int currentScene = 0;
    private float sceneTimer = 0f;
    private boolean sceneComplete = false;
    
    private String[] scenes = {
        "–ù–∏–∫–∏—Ç–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø–æ–¥–∑–µ–º–µ–ª—å—è –∑–∞–º–∫–∞...",
        "–ü–µ—Ä–µ–¥ –Ω–µ–π —Ä–∞—Å–∫–∏–Ω—É–ª—Å—è —Ç–µ–º–Ω—ã–π –ª–µ—Å, –æ–∫—É—Ç–∞–Ω–Ω—ã–π —Ç—É–º–∞–Ω–æ–º.",
        "–ì–ª–µ–±: –¢–≤–æ–π –æ—Ç–µ—Ü –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è. –û–Ω –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–µ–±—è.",
        "–ù–∏–∫–∏—Ç–∞: –Ø –∑–Ω–∞—é. –ù–æ —è –Ω–µ –ø–æ–∑–≤–æ–ª—é –µ–º—É –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —ç—Ç–∏ –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏—è.",
        "–ì–ª–µ–±: –í –ª–µ—Å—É –µ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏–π –∞–ª—Ç–∞—Ä—å. –¢–∞–º –º—ã —Å–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ.",
        "–ù–∏–∫–∏—Ç–∞: –ß—Ç–æ –∑–∞ –∞–ª—Ç–∞—Ä—å?",
        "–ì–ª–µ–±: –ú–µ—Å—Ç–æ —Å–∏–ª—ã, –≥–¥–µ –∫–æ–≥–¥–∞-—Ç–æ —Å–æ–≤–µ—Ä—à–∞–ª–∏—Å—å —Ä–∏—Ç—É–∞–ª—ã –∑–∞—â–∏—Ç—ã –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞.",
        "–ì–ª–µ–±: –ù–æ —Ç–≤–æ–π –æ—Ç–µ—Ü –∏–∑–≤—Ä–∞—Ç–∏–ª –∏—Ö, –ø—Ä–µ–≤—Ä–∞—Ç–∏–≤ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–æ–µ–π –≤–ª–∞—Å—Ç–∏.",
        "–ù–∏–∫–∏—Ç–∞: –¢–æ–≥–¥–∞ –º—ã –¥–æ–ª–∂–Ω—ã –¥–æ–±—Ä–∞—Ç—å—Å—è —Ç—É–¥–∞ –ø–µ—Ä–≤—ã–º–∏.",
        "–ì–ª–µ–±: –ü—É—Ç—å –æ–ø–∞—Å–µ–Ω. –õ–µ—Å –ø–æ–ª–æ–Ω —Ç–≤–∞—Ä–µ–π, –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –≤–æ–ª–µ —Ç–≤–æ–µ–≥–æ –æ—Ç—Ü–∞.",
        "–ù–∏–∫–∏—Ç–∞: –Ø –≥–æ—Ç–æ–≤–∞. –ß—Ç–æ –±—ã –Ω–∏ –∂–¥–∞–ª–æ –Ω–∞—Å –≤–ø–µ—Ä–µ–¥–∏.",
        "–ì–ª–µ–±: –¢–æ–≥–¥–∞ –∏–¥–µ–º. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å.",
        "–ù–∏–∫–∏—Ç–∞ –∏ –ì–ª–µ–± –∏—Å—á–µ–∑–∞—é—Ç –≤ —Ç—É–º–∞–Ω–µ –ª–µ—Å–∞...",
        "–ì–¥–µ-—Ç–æ –≤–¥–∞–ª–µ–∫–µ —Å–ª—ã—à–∏—Ç—Å—è –≤–æ–π –≤–æ–ª–∫–æ–≤...",
        "–ò –∑–≤—É–∫–∏ –ø–æ–≥–æ–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞—Ç–∏—Ö–∞—é—Ç..."
    };
    
    private float[] sceneDurations = {
        3f, 2.5f, 4f, 3.5f, 4.5f, 2f, 4f, 3.5f, 3f, 4f, 3f, 3f, 3f, 2.5f, 3f
    };

    public Level1EndCutscene(NikitaGame game) {
        this.game = game;
        batch = new SpriteBatch();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å FreeType —à—Ä–∏—Ñ—Ç
            FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("Roboto-Regular.ttf"));
            FreeTypeFontGenerator.FreeTypeFontParameter parameter = new FreeTypeFontGenerator.FreeTypeFontParameter();
            parameter.size = 24;
            parameter.color = Color.WHITE;
            parameter.characters = FreeTypeFontGenerator.DEFAULT_CHARS + "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø";
            font = generator.generateFont(parameter);
            generator.dispose();
            System.out.println("‚úÖ FreeType —à—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        } catch (Exception e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å FreeType —à—Ä–∏—Ñ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            System.out.println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å FreeType —à—Ä–∏—Ñ—Ç: " + e.getMessage());
            System.out.println("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç");
            font = new BitmapFont();
            font.setColor(Color.WHITE);
            font.getData().setScale(1.5f);
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try {
            background = new Texture("throne_room.png");
        } catch (Exception e) {
            background = null;
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –º—É–∑—ã–∫–∏
        try {
            music = Gdx.audio.newMusic(Gdx.files.internal("prologue_theme.mp3"));
            music.setLooping(true);
            music.setVolume(0.5f);
            music.play();
        } catch (Exception e) {
            music = null;
        }
    }

    @Override
    public void show() {}

    @Override
    public void render(float delta) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã
        sceneTimer += delta;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
        if (sceneTimer >= sceneDurations[currentScene] && !sceneComplete) {
            sceneComplete = true;
            fadeOut = 0f;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ fade —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        if (!sceneComplete) {
            fadeIn = Math.min(1f, fadeIn + delta * 2f);
        } else {
            fadeOut = Math.min(1f, fadeOut + delta * 2f);
            if (fadeOut >= 1f) {
                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ
                currentScene++;
                if (currentScene >= scenes.length) {
                    // –ö–∞—Ç—Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
                    if (music != null) {
                        music.stop();
                        music.dispose();
                    }
                    System.out.println("üé¨ –ö–∞—Ç—Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥ –∫ level_2.tmx");
                    game.setScreen(new GameScreen(game, "maps/level_2.tmx"));
                    return;
                }
                sceneTimer = 0f;
                sceneComplete = false;
                fadeIn = 0f;
            }
        }
        
        // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        Gdx.gl.glClearColor(0.1f, 0.05f, 0.1f, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        
        batch.begin();
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ–Ω–∞
        if (background != null) {
            batch.setColor(1f, 1f, 1f, 0.3f);
            batch.draw(background, 0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
            batch.setColor(1f, 1f, 1f, 1f);
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω—ã
        if (currentScene < scenes.length) {
            String sceneText = scenes[currentScene];
            
            // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            float alpha = sceneComplete ? (1f - fadeOut) : fadeIn;
            font.setColor(1f, 1f, 1f, alpha);
            
            // –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ä–∞–∑–±–∏–µ–Ω–∏—è
            float yPos = Gdx.graphics.getHeight() * 0.6f;
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            float textWidth = font.draw(batch, sceneText, 0, 0).width;
            float xPos = (Gdx.graphics.getWidth() - textWidth) / 2f;
            font.draw(batch, sceneText, xPos, yPos);
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞—Ç—Å—Ü–µ–Ω—ã
        if (fadeIn > 0.5f && !sceneComplete) {
            String progress = "–°—Ü–µ–Ω–∞ " + (currentScene + 1) + " –∏–∑ " + scenes.length;
            font.setColor(1f, 1f, 1f, 0.7f);
            float progressWidth = font.draw(batch, progress, 0, 0).width;
            float progressX = (Gdx.graphics.getWidth() - progressWidth) / 2f;
            font.draw(batch, progress, progressX, Gdx.graphics.getHeight() - 50f);
        }
        
        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if (fadeIn > 0.5f && !sceneComplete) {
            font.setColor(1f, 1f, 1f, MathUtils.sin(sceneTimer * 3f) * 0.5f + 0.5f);
            String hint = "–ù–∞–∂–º–∏—Ç–µ –ü–†–û–ë–ï–õ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞";
            float hintWidth = font.draw(batch, hint, 0, 0).width;
            float hintX = (Gdx.graphics.getWidth() - hintWidth) / 2f;
            font.draw(batch, hint, hintX, 100f);
        }
        
        batch.end();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–∞—Ç—Å—Ü–µ–Ω—ã
        if (Gdx.input.isKeyJustPressed(Input.Keys.SPACE)) {
            if (music != null) {
                music.stop();
                music.dispose();
            }
            System.out.println("üé¨ –ö–∞—Ç—Å—Ü–µ–Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥ –∫ level_2.tmx");
            game.setScreen(new GameScreen(game, "maps/level_2.tmx"));
        }
    }

    @Override
    public void resize(int width, int height) {}

    @Override
    public void pause() {}

    @Override
    public void resume() {}

    @Override
    public void hide() {}

    @Override
    public void dispose() {
        batch.dispose();
        font.dispose();
        if (background != null) {
            background.dispose();
        }
        if (music != null) {
            music.dispose();
        }
    }
} 